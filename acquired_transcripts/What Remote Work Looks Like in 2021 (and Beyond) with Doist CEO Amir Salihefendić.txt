David: Welcome, Acquired LPs. I think this will probably be our last LP Episode of 2020. Very exciting. I'm excited for 2020 to be over, but we have a great topic and a great guest of looking forward to 2021 in a non-Coronavirus world. We can keep all our fingers crossed. Amir Salihefendic from doist.com, and Todoist, and Twist, which we're all going to get into. Ben and I have been long time Todoist users and Ben has spun Todoist productivity stories from his own history we'll get into. 

Ben: Amir both started an iPhone based to-do list app before I did and continued far after I did. 

David: Here you are being a podcaster and venture capitalist. You could be doing much better if you'd stuck with it.

Ben: It's true. If only I had kept bootstrapping, but I think we'll get into that. 

David: We'll get into that. Amir has bootstrapped Doist, which is what we'll talk about at the top of the show but more setting the stage at the topic we really want to cover, which is you've built a now 90 close to 100 person totally remote global company before Coronavirus, before that was cool, before Gitlab. 

We're going to talk about what it looks like as all of us start making decisions hopefully next year about what our companies are going to look like, where we are going to work, how we are going to work, what new companies we might start in the future may look like. We're going to talk to Amir about how to do it right. Welcome to the show and thanks for joining us. 

Amir: Folks, thank you for having me. It should be said that I'm a huge fan of the show. I actually found it a few months ago and I have been binging ever since. I'm really a huge fan. The depth that goes into this is really something. I really appreciate the work you folks do. I hope I can contribute and get some content that maybe people will not find elsewhere. 

Ben: I'm sure you can. In our prep call, listeners, David and I have had loosely on our agenda for a while to do something about how to do remote work right, but everyone seems to have the same things to say and here's the three tools you use. In the 50 minutes of talking with Amir, we're like, oh we've been thinking about this wrong and we've been thinking about remote work as we're in the mesozoic era of the tools necessary to make remote good and I think it's like remote trying to impersonate an impersonal world.

Amir, I just really like how you guys think about it and really thinking about let's forget the concept of an office and the concept of everybody synchronously being in the same room. How would you work if you have never ever had that constraint. You've been at it for 13 years, is that right?

Amir: Yeah. I actually have never really had a proper job, like an office job. I have only been like a student and a programmer at the university. Other than that, I have never had a proper office job. I don't actually like when I slam office work. I could just imagine how bad it is. I have never actually tried it out for real.

I think this kind of disruption of work, and the second and third order effects of this will be huge. My vision of this is quite extreme, but I think it's maybe based on the verge of being another industrialization because it's the first time in human history where you can get an amazing job regardless of where you live. Implication of that is just very, very significant.

David: People have been saying this, likewise with that I'm so glad we waited to do this because people have been talking about this idea for a long time. You've been evangelizing it to us. We even had Wade from Zapier on the show in February right before the pandemic and we spent five minutes on remote work. It's like, yeah, you can get a great job anywhere. It makes sense.

Ben: Kind of buzzy topic of working remote organizations, blah, blah, blah. Tell us about Zapier.

David: Before we get into the meat of the topic here—to set the right context—we have to tell a little bit of the Doist story. Can you take us quickly through this? Going from student to your time in Chile and starting this as a side project, how did you end up now running this company? Let's talk also about the scale that you're at because I think that's important.

Amir: Like Ben, I also wanted to do a to-do app. A lot of developers, they do that. You create a dummy to-do app and I did that as well. The thing I did basically after that is continue working on it for 13 years now.

Ben: It's a very sophisticated ‘Hello, World!’

Amir: Exactly, yeah. Honestly, when I started out this to-do app I didn't really do it to do a business. It wasn't a starter for me. It was just a side project that I wanted to do for myself. That's basically the framing of that. It took me actually four years to make it into a real company. Basically I was working on this on the side. It survived for four years. 

When I actually hired a support person, it was because I really didn't want to answer more support emails, especially some of the early people. Some of them are still using the software and I actually know some of them. They will send me pages of feedback of stuff that didn't work, that should have improved, and I was just like, oh no. Even right now, we have actually hired some people to send me feedback and they essentially send me pages. I just reply, "We are not going to do that."

Ben: Way to listen to the users. I think that's exactly what people are supposed to do.

David: If we have our timelines right, it was 2007 when you started this as a project. Then, you started a social media project. It was in 2010 when you came back to this. You made your first hire and you thought maybe this could be a good thing.

Amir: Exactly. Basically, I started Todoist and then actually had some success. I even had a business model where it was profitable. But then, I got a really good offer to be a co-founder and CTO of a social network. I jumped into that and we basically competed early on with Twitter. We lost that battle.

Ben: What was it called?

Amir: It's called Plurk. It's actually still running. It has about 20 people hired in Taiwan. It's mainly really big in Taiwan still and also some other Asian countries. That was basically it. I actually almost burned out on doing the social network because it was super stressful. I basically worked all the time and we didn't have a business model. We were raising money and selling the thing. It was just so much stress. 

I actually thought at some point I would be 20-something and be a multi-millionaire. Those dreams just unraveled and it never really became real. Which is why when I came back to start the real company, I was just like, I don't want to stress again. I want to build this on my own pace, build a culture I actually want to work in for decades. That's why I like this bootstrap mentality and also not raising money. I actually could have raised money early on for Todoist as well. I spoke to a very famous Silicon Valley VC and one of the first things they wanted to do is replace me as a CEO.

Ben: You mentioned was that actually in the term sheet?

Amir: He wanted me to meet some potential CEOs that could come in and replace me.

David: Let me guess, friends of the firm?

Amir: Yeah, exactly. I was like [...]. I'm not going to sign up for that.

David: Was this early in Doist's life or was this later after you already had revenue and scale?

Amir: It was early on. It was I think maybe 2007. It was before maybe I started on the social network.

David: So it was really early. 

Amir: It was really early. They were visionary, but they didn't really believe I could actually be a good CEO. And maybe they were right.

Ben: What has the company evolved to today? Give us a sense. I think you're profitable, right?

Amir: We have actually been profitable every year since we started and we are about 100 people. Growth has never been a huge thing. We don't actually have milestones that we want to hit and stuff like that. It's kind of very controlled as well.

David: To be clear, you've never raised any money. There's no outside capital in Doist. 

Amir: Exactly. 

David: Probably to a bunch of listeners, it sounds a little crazy to say you don't have milestones of growth, but you don't have to. You have to operate profitably because there's no capital in the business. As long as that happens, you don't have to be racing ahead to go raise your next round to stay alive, right?

Amir: Exactly. Honestly, that was something that's very important for us.  A lot of our competitors—we have some—like Monday is one example where you burn millions per month on ads, and you have this unit economics that doesn't really make sense and stuff like that. Maybe also the culture that you have is very broken. 

If you combine all of that, we don't think it's worth it. Of course, we have huge ambitions. We do want to have impact. We are really, really hard on ourselves with regards to the product, to the quality, and also maybe to our growth. But it's not like if we don't hit $100 million in revenues next year, we will be very unhappy. It's a different model and I think it's more sustainable. The reason why I can optimize for that is I know I will spend decades on this. For me, there's no exit in mind, and I don't want to burn out five years into this.

Ben: To give further context, to me, the people behind Todoist were a big company, because it was software that I have been using for a long time, loved, and felt solid. I don't know how to define the company other than that. How many users do you have? It was a single product company for a long time. When did you decide to become a two product company? Give us some more of the info there.

Amir: We started with this to-do app and then we find out actually this is a much, much bigger problem because most of the way that we currently organize ourselves and our teams is completely broken. I still think like this today even if you have Asana and stuff like that. It's kind of a very broken tool that we still have for this. It's a really, really deep problem that we have not solved yet either, so we are still working on solving that problem. But then, we were a fully remote company and we actually use Slack. But that was kind of a very, very bad experience, especially if you have many time zones and you have to be connected all the time. 

We also tried to promote deep work inside a company. This means when you actually do something, you should be able to focus on it fully. This idea of being disrupted all the time, being on this chat channel all day long, it was really not promoting the type of environment that we want to foster. Then we looked at the environment and nobody actually had any tool for this to promote more deep work and asynchronous communication as the default. That's why we actually did Doist. 

If you read any books or any strategy, it's basically a very stupid idea because you have something that's growing. Today, it's growing over 100% per year when we actually committed to Twist. We started on a project with competitors that have billions in valuations and we have trillion dollar competitors. The reason for this is basically, we don't really believe the model of the future is synchronous communication. We believe asynchronous is the default. 

I think we're being proven a bit right and it's really hard because we have been preaching this for the last five years. Yesterday, Paul Graham promoted a bit asynchronous, first on Twitter and urged companies like startups to innovate in this field, which is maybe a bit bad for us, but I think that's good for the whole community.

David: That's great. For context for people who aren't familiar, Todoist is the to-do app and you can use it personally, just yourself, but also in an organization across teams, which I assume you use internally at Doist as your main project management software. But then, was it five years ago that you launched Twist?

Amir: Yeah. Basically on Todoist we kind of have product/market fit. On Twist, we didn't and we still don't have a strong market pull because it's super early. I think companies that run asynchronous as default are probably under maybe 10 that have more than 50 employees, so it's super niche. The companies that do this are very special, like GitLab, Basecamp, Buffer, Zapier. I'm pretty sure this will be something that will be more common (hopefully) as this space matures.

Ben: If I'm saying I just took my office toolset with me and now I'm an employee at a remote company, and I say, great, I've got my email, I've got my Slack. I've got my Zoom, and then there's some project management system of record—Asana, Smartsheet, Todoist, or whatever—what's wrong with that and how does your vision of the way a remote-first company can and should be run? How is it different from what we're all sort of experiencing right now?

Amir: That's a very good question, Ben. Honestly, I don't think we have reached this stage yet. I think we are still some years from actually reaching the stage where we have to stack the new stack. Maybe we can try to draw a parallel to Git. I'm not sure if listeners know what it is, but it's basically a distributed versioning system. 

In the beginning, when you actually did development and collaborated with other people, you would actually send patches over, or files, even [00:15:14]. Then, you need to merge them manually. You even got something like Subversion or something like that that was a bit smarter, but there was still merging files in and it was a really, really bad model. 

Then, Git got born. Actually, Git's history is very interesting because it was born in the Linux kernel. If you look at the first commits of Git, Linus (who created Linux) actually created Git. He did that in a few, I think on a weekend or something like that. It's insane. The thing is that Git and GitHub, which is basically built on top of Git, has basically changed the developing world totally. Nobody would develop today without a distributed versioning system. Everybody knows, but actually when it started out, it was freaking hard to use. The only development team that used it were Linux developers, which were hired experts.

Ben: To really pile onto that, in my early development days, I was using CVS, and then SVN or Subversion. That was all centralized. There was only one source of truth. You would check it out, you would work on it, and then you'd check it back in. It was sane. 

When Git came out or became popular before the advent of GitHub to sort of recentralization in a cloud location, it was this crazy concept that everybody could have their own version of the code that they could be working from locally and then from any node could be shared, like any other developer to any other developer, like here, clone mine. 

It was this crazy, multi-crossing, decentralized work and you did really need something like GitHub to come along and sort of recentralize it, not in the same way that Subversion was, but in a way that you could then make sense of who was working on what across your team.

Amir: Yeah and that's basically where we are stranded with work. I think work is still in the pre-Git days. What we basically need is this new stack that can replace this. I think you can see a lot of inefficiency in how we organize, how we communicate, how we share knowledge. 

Everybody is just patching it and hoping for the best. Even if you read about remote work, a lot of it is kind of just taking the office paradigm and moving to digital. It's not like building a whole stack for the digital world. A lot of innovation needs to happen here.

David: Packy McCormick, who Chris just did a collaboration with on the Slack episode relevant for this, wrote this piece the other week on Not Boring, about I think he called it, we're not going back. Remote is the future now. He looked at some of the software that's being built right now, like remote HQ software. Some of it is literally skeuomorphic, like a little video game version of an office space. That doesn't seem right.

Ben: It reminds me so much of the early Internet where it's like, what does a newspaper look like online? Basically a scanned-in version of the newspaper in a web browser. Or what is a mobile app look like? We took your desktop app and we jammed it onto your phone. I think the famous example of this is that the first movies were recorded stage performances.

Once you move into a new medium, it takes some time to figure out what is native to that medium. Amir, this is the first time I've thought about remote as a medium and figuring out what does native mean to the remote medium versus adapting our previous life.

David: You guys have been doing this now for a decade. What does it look like at Doist?

Amir: I think remote is the spectrum where you have office real time. Then you have these hybrid setups. Then on the [00:19:08] extreme addition, you have remote first, asynchronous first. Where we have actually operated since maybe the last five years is asynchronous first and remote first. I did an interview with Superorganizers, I think it's called—it's another newsletter—where he titled it, The CEO with an empty calendar.

David: Such a great [00:19:33]. We'll link to it.

Amir: Basically, what [00:19:33] you don't have that many meetings. There's a lot of deep work that's involved. You can structure your days as you like. Something that the Not Boring article didn't get correct is this is not only good for the life of people; it's also good for work. Honestly, we are doing knowledge work where creativity and focus is actually the most central part.

A lot of office environments and even digital real time environments are not optimized for the focused and deep work. I also think remote first thing is really also optimizable. It's designers, writers, coders. Even our finance people. Everybody inside of the company, people ask people. They ask asynchronous first. They think before they say something. 

Something else to know is we actually hired our first HR person last year. We have had zero HR issues or something like that because in an asynchronous environment, you don't have these. Of course, you can have them—we are all humans—but it's much more common in a real time environment where you can have people going in a flame war and insulting each other.

David: Like the Coinbase Slack that got out of control. Maybe this is a good place to double click then on what exactly does operating asynchronously mean? You do it through Twist. What is Twist and why is it not Slack or email?

Amir: Something to know is I think actually the culture is much more important than actually the tools that you use, but the tools are also important. I read somewhere that the tools that we use shape us and I think that's very critical as well. 

Something to note about, it's like a written culture. Gitlab is an extreme version of this where they have the handbook that's 4000 pages long and updated by everybody in some company. But it's kind of the culture of doing so. 

Actually, inside Twist, we have about 1.5 million messages. Everything is indexed, searchable, and transparent. Even leadership discussions, like most things. Actually the only thing that isn't really public is the salaries of people.

I’ll cite we have made a mistake there, but everything else is public. I think the written is really dominant and great writers are really the people that get promoted and get great communicators. Also something with remote-first and asynchronous-first is it will change the dynamics inside of companies because extraversion, being likable will maybe not matter as much as the stuff that you say, the impact you have and stuff like that.

David: How is it—either in the culture or in the tool—set-up then that it doesn't devolve into Slack where it’s like as people communicate back and forth, it just becomes this chat?

Ben: My email has turned into this, especially if somebody responds right away to my email, then you set this expectation that this is now a real time channel until one of us decides to break that contract. 

David: If anything, Superhuman is making email more like this.

Ben: Do you try to design constraints into both your software and your culture to discourage real timeness without an explicit opt-in from both sides?

Amir: Exactly. Design patterns matter a lot. For instance, something that we don't have is you can’t see when somebody is online, you can't see when they were last online, you can't see what they have seen and what they haven't seen. This kind of discouraged real time communication between people. That's just like one pattern. Another pattern is for instance in our comments or chats, you have a huge text box. That does not really say, write a one-liner here. It's kind of like, write content here.

As a product designer, you can do stuff like that to encourage more long form. But then again, I think the culture matters a lot as well. Of course, you can still have people posting one-liners and I'm pretty sure some Twist users do that. If people go in and see huge threads with a lot of content, they will not go in and slam in it to begin to post one liners. I think expectations and culture matters a lot as the tools do.

Ben: Where does real time communication have its place in your company?

Amir: That's also something we have experimented with. We have actually tried to do fully only asynchronous-first until our head of marketing said, guys, I have completely lost touch with people because…

David: You went really down the rabbit hole on this.

Amir: I can tell you asynchronous-only does not really work. It's great as the default way but I still think you need to have meetings with people. For instance, one-on-ones are synchronous. Also most teams have synchronous meetings, like weekly meetings where we're just checking, you can see the people that you're working with. 

Honestly, I think even for asynchronous-first and remote-first, meetings in person are really, really critical as well. What we have done from early on is retreats. Honestly, this has been some of the most rewarding and fun times because basically you work with people for a year, then you see them, and then magic happens because we are humans after all. The human connection is very important.

Before COVID, we also did team retreats. Our teams organize their own retreats. Some have done it, and a lot of them like these retreats. We try to make them fun. We have been to Iceland, Chile, and just flown a lot of people around the world.

I think for remote-first and asynchronous-first, these are some of the biggest perks as well is basically creating these retreats.

Ben: It probably puts a lot of the heavy lifting on making sure you really are thoughtful about the agenda and the schedule when you're doing these, because if it's only once a year that people actually have an opportunity to be in person, I assume that means you have to be very structured or very thoughtful about how you plan that.

Amir: Actually, some of the stuff that we do, we don't work a lot. It's mostly just hanging around with people, getting some good food, seeing some things, and doing some stuff. What we had done, almost every retreat is like a football tourney, which is really great. A lot of people don't play that well but it's still very fun.

David: There's two things I've been thinking about that we haven't called out in discussing this but I think are important, are the football comments.

Ben: That's soccer for you Americans.

David: Exactly. You mentioned times, how many time zones and how many countries are Doist employees in right now?

Amir: I think we are in 35 different countries. I'm not sure about time zones, but we are all over the world. Something to also note, what we have not done and some like Zappier, they have mostly hired in the US, which makes things much easier. We have hired all around the world.

David: You're dealing with taxes, legal issues, and employment across 35 countries.

Amir: Yeah. Honestly, I think most people are not really dealing with that and neither are we. We are only dealing with that in the US because we are a US-based company. Other than that, it's basically independent contractors. They figure it out and we pay them to get accountants and stuff. 

That's actually the most common way to do that. Of course, there's a lot of work that's being done by remote, for instance to streamline this. I think I'm pretty sure I see a lot of innovation in this space.

Ben: Remote the company that handles the onboarding HR, all the technical components of HR for the employment model?

Amir: Exactly, yeah.

David: It's amazing to just step back and think about this. You've got people all over the world speaking all these different languages in all these different countries, all these different time zones. You bring everybody together and you're going to play football because that's the global game and you're going to call it football. 

This asynchronous culture and way of working, I have to imagine it just grew out of that. There's no way you could make real time chat work when for a significant portion of your colleague, it's the middle of the night for them at any given moment in time.

Amir: Exactly. Honestly, I think this timezone issue is just one aspect of that. I think another aspect and I'm sure you have read Paul Graham's Maker’s Schedule, Manager’s Schedule. The thing we do is most are makers. We don't actually have any almost pure managers. I think we only have one person inside a company. But even he does stuff that is actually more IC work.

That’s the problem. If you're deep into something, you don't want to get disrupted in your day. That's also a huge component. Also for me, as a leader of this asynchronous-first, remote-first, using Slack, I would actually need to be connected all the time. If I wasn't connected, I would get nightmares and look at Slack to see if some discussion is going without me and stuff like that. It really creates very, very bad habits where you basically can't disconnect and this is also really bad as well.

Ben: Amir, you're the CEO of a 100-person company that's growing 100% year over year. Are you a maker or a manager at this point? How do you structure your work?

Amir: I tried to stop development for many years now. I also have a coach. Last year, we did a 360 review of myself. There are a lot of people who said, Amir, stop doing encoding. We need a CEO. 

I have actually tried to do less of that because honestly, I love to develop. I love to create stuff. I don't love to manage people. That said, in order for the company to succeed, for myself to succeed, I need to manage people and stop doing development. I managed that. Then, I saw Toby from Shopify. He does two hours of development per day, what they say. With [00:31:17] maybe I just need to figure out how to do this because for me, if I lose the creativity part, then it becomes a very dull job. Regardless of how big Twist is, if I'm not happy and satisfied, I'm trying to limit it. That's the answer to that.

Ben: I guess it was a leading question because I think one way I'm going to keep structuring this is I'm going to think of things that I have to do synchronously, or in person, or in a video call and then I'm going to ask you how you do them. You're trying to do more management and more be a CEO and code less. How do you interact with your directs? Do you have weekly one-on-one's? Do you do those over video chat? How does that work?

Amir: Honestly, something that we really encourage a lot is one-on-ones. We do them bi-weekly, but it’s actually up to leaders themselves to structure how they want to do it. I do them bi-weekly. I think they are great tools. Actually, when we implemented that, it was probably one of the biggest advancements for our company. Of course, you can maybe do it in an asynchronous way, but it's worth spending an hour on just meeting with the person that you work with.

Ben: How do you deal with that if, let's say there's a product manager, engineer, or designer, a team and they are each eight hours apart? On the one hand, it's really good if it's really humming because work can be done 24 hours a day and just shift it across the globe. On the other hand, if there’s a blocker issue, how do you deal with that as a company when the person that you need to ask a question to is no longer working?

Amir: In an asynchronous environment, you're blocked by default. You’ll figure out very quickly that you need to have some other stuff on your plate as well if you're blocked until that gets resolved. Some stuff moves slower because of that, but most of the time it's not really a problem. 

That said, something where we can see it's a huge problem is if you have inexperienced people, like junior people coming in, they need a lot of hand-holding. They can be blocked almost all the time. You really need to have people that are independent and more senior authorities to work.

We are still trying to figure out how we make mentorship, and how junior people work and evolve in this type of environment. Maybe here, you actually need to have synchronized time zones and more synchronous communication.

Ben: That's very interesting. Thinking about these companies that just went remote forever or remote optional forever, they are big companies. I may get the company wrong, but I think Microsoft just for their whole engineering or R&D org said it's okay to never come back to the office. How on earth is that going to work at companies at that scale that have a thousand college new hires that start every week?

Amir: I think a lot of people will have really, really bad experiences with remote work because you need to have the whole set-up, the whole culture in place. If you don't have that then I think you'll basically have bad outcomes. Another thing to note is how you evaluate work also changes. For us, for instance, our leaders are experts at what they do. There's a reason for that. You can't just have a pure manager that doesn't really evaluate the work properly. They don't really know what a good design is, what is bad design, what is good code, what is bad code.

That answers this question of how do you know that people are working. If you have an expert that is managing you, they will look at the output and say this is garbage. I can't believe you spent one week on this. It's very easy to do that, but it's very hard to do that if you don't really know the subject in a deep way. I think it really changes the leadership role as well. There are a lot of implications that are just all over the place.

David: How do you set expectations when people come into Doist? I would imagine almost everybody who comes in has never worked in this mindset or modality before. What do you do to prevent a smaller scale version of this example of a thousand new college grads coming into Microsoft, like this is a recipe for disaster?

Amir: I think that's where something like the handbook comes in play. We also have our own handbook. We actually started that only last year, but it has already been a huge game changer. I definitely understand why GitLab even has a full-time person and maybe even a team working on the handbook. You really need to have a lot of stuff documented. For instance, for us, a big shift was core values and really also not selecting some core values that aren't your core values. Just some aspirational thing that is in some document somewhere, but what do we really care about and then document that.

People that are new in the organization are going to read the document and say this is what they care about. Our core values touch almost everything else inside the company, including how we compensate people and stuff like that. It's a free world that goes through that. For instance, one of the values that we value a lot is mastery, growth, learning. 

Another thing is communication and independence. These are really, really important stuff. Communication and independence are really also important for the environment that we work in because if you're not independent, you get blocked, and you can’t resolve it, you could basically be blocked for days ahead of time.

David: You're not going to succeed in this modality.

Amir: Yeah.

Ben: I'm assuming that your go-to market strategy is mostly product-led growth. You don't have sales people. You're not primarily a sales-driven organization. Is that right?

Amir: We don't have a single sales person. That’s a problem.

Ben: I try not to exaggerate. Again, I'm asking these leading questions. Do you think this works uniquely for you? You have a whole company of makers. You don't really need to be client-facing, you don't really need to do a lot of the things that require the most human interaction, and everybody can be largely independent and creative.

Amir: Yeah. I still think we're learning on this front. I would actually love for us to bring in a sales team and maybe even try to innovate on the sales function. If you read what popular venture capitalists tell you is don’t innovate sales, just hire a COO. Why don’t we innovate on sale? How do you compensate for that as well and stuff like that? That's still something that we need to explore. We would love to become much better at that. At this current stage, we have been way too focused on building great products, bringing sales as well. It just feels very overwhelming, but I hope we can do that soon.

David: I was actually thinking a lot in preparing for this and when Ben asked the question about sales in this modality. I've never worked directly in sales, but we do sales at Acquired, we get exposed to it, VC sells in its own way. I actually wonder if sales is a perfect candidate for this type of work, because it should be 100% output focused. That's all that matters. Did you make the sale? Did you hit your quota? 

If you were able to culturally land this, I wonder if it would be a lot more productive as a sales organization to have it be purely outcome-focused versus we all probably know and have observed a lot of sales organizations that instantly become political. You've got all these hyper-competitive people looking for attribution on this deal or that deal. Obviously, this wouldn’t work for every type of sales approach, but I think it could work for a lot.

Amir: I think you're right. This needs to get explored and challenged.

Ben: You have three non-sales guys sitting around hyperbolizing about how this is great for sales. If you're listening to this, join us in the Slack and let us know how you can make this work at your company.

David: Well again, I think it depends on the type of sales. Something like Doist—either Todoist or Twist—I can totally imagine this is an individual person selling this. I don't know that you would need a whole wide team, but of course you’d have to collaborate across sales and marketing. If you can have reps in every country in the world—not just physical location but of every set of networks and type of target companies that they have networks that have backgrounds in—and they can just be focused on that and not worry about all the other stuff, that sounds pretty good to me.

Amir: Well, I'm inspired. I think the problem for me is sales isn’t really a strong suit. What I think is maybe a good idea isn't really a great one. The thing I think about is trying it out. Maybe if you just follow the standard playbook, maybe you’ll actually not fully succeed because everybody else is doing that. It's like trying something out of the ordinary could maybe be a good strategy.

Ben: Amir, I'm curious how do you acquire customers and how has that changed over time?

Amir: We have been very lucky with tapping in some very powerful distribution channels which are free, so SEO if you search for ‘to-do list,’ we are going to be at the top on all the search engines; the app stores as well. We actually don't do any paid marketing and everything is organic.

Ben: To what do you attribute having that really good SEO?

Amir: The name. Honestly, I think of the name randomly, but the thing is Todoist and to-do list are very, very similar. It should not surprise me if the engines actually think that we are todolist.com and not todoist.com.

Ben: That could’ve gone either way. They could’ve thought it was a typo. I will tell you, I am frustrated on a multiple time per week basis because I will say—everybody's phones are going to go off—Hey Siri, and I'll say, remind me to blah, blah, blah in Todoist. Siri thinks and then Siri back and says, great, I added it to your reminders. It'll literally say like in Todoist in my thing that I just accidentally put into reminders. Even Siri does not really parse that word well.

Amir: Yeah, but there are some disadvantages and advantages. Honestly, I think a lot of stuff is helpful, like being early in 2007, building, and the mobile apps as well. Maybe, it was just sticking around for 10 plus years. A lot of our competitors didn't do that, so that also helps a lot.

David: If you want to talk about it, I'm curious what Wunderlist was like, competing with them? Without knowing a ton of details on their history, they almost seem like the what-would-have-happened-otherwise to the different path you could have taken with Todoist. It started in Berlin, got wide adoption, it was doing great and then Sequoia came in, led an A, then they ended up getting acquired by Microsoft, and the product died within Microsoft.

Ben: It was a $100 million deal, too.

David: I think it was somewhere between $100 million and $200 million.

Ben: One of the reasons that it’s a great comparison is because from a product perspective, it’s quite similar. It's the most pure play to-do list. If all you want is a simple list that really, really reliably you put stuff in and it syncs across your devices, Todoist is your best option today and Wunderlist was an amazing option when it was around. With all that context, I'll turn back to David's question. What was that like when they came on the scene?

Amir: Initially, I was not really very aware of them. It's only after they got a lot of scale that I became aware of them. Of course, the problem with the Silicon Valley model is there's no business model. They didn't have a business model. They gave everything away for free.

David: They did have a pro but you didn't really have to pay.

Amir: It was kind of ridiculous, you would really need to be an extreme user to pay. For us competing, we need to build a profitable business. They don’t. They basically had almost $30 million or whatever they could just burn. Of course, that can generate a lot of growth, but it's also maybe not very sustainable. Our strategy of surviving them was pretty good. Maybe we would have lost if they have kept raising more money, kept pushing the boundaries, and gone for that model. 

I think something to know as well about this productivity space is that retention is really, really brutal. It's basically starting a gym, the app version of gym. Also competition is also brutal. Most VC’s today look at the numbers. They're saying this is very, very bad. It's a brutal space as well. I think that's also maybe one of the reasons why we haven't seen 100 million. Maybe we have with Asana and Monday, but that's more of enterprise play and not like this to-do app that Wunderlist occupied.

David: It's interesting to see that now. Was it Christian who's the CEO, I believe?

Ben: Yeah, and now the CEO of Pitch.

David: Exactly. I was going to say he left Microsoft and started Pitch now. I wonder if perhaps specifically taking some of those lessons, I'm just projecting but thinking this needs to be collaborative productivity, enterprise-wide from the get-go if you're going to raise all that money.

Amir: Yeah. That’s maybe also Todoist opportunities, we have solved partially (in a good way) the single-player mode, and we’re still linked to (later on) the multiplayer mode. I'm quite excited about that because in these spaces, single-player is the brutal way of building a business. You also don’t really have this expansion. You don’t have intra-network effects. LTV is also really low because you're just acquiring one user at a time. A lot of the stuff doesn't really make sense. Maybe it does make sense if you actually nailed that. Then you have a lot of notes that you can basically build at least a virality but also network effects from.

David: Every time I tried Asana, since I mostly do these days fully operating single-player mode, the single-player mode is garbage. I won’t talk about the multiplayer mode from a product perspective, but certainly single-player mode on these enterprise-wide systems are terrible. If you're able to have both, great—single and multiplayer modes. Nailing that single-player mode is something that nobody else has really done.

Amir: I think we will see some of these new tools. Notion is probably a great example of really having a great single-player mode and multiplayer mode. Creating these tools, the complexity goes way up. There's a reason why Asana aren't good at single-player. It's really hard to be good at both.

Ben: Well Amir, I'm curious what are you excited about for the future of Doist? What's the long-term vision?

Amir: That's a great question. Honestly, I'm really long-term thinking. I'm thinking about investing all my life into this. There's no exit in mind. I don't want to sell. I just want to have a great company that I love to work at. That's one aspect. 

Another aspect is I really feel the way that we work and live is totally broken. I really think we need a new stack, and I would love to work on building the new stack. That's something that I'm really excited about and I’m really challenging the status quo. For instance, trying to make asynchronous as default, more widespread than it is.

I think a lot of the other stuff that we do is knowledge sharing as well. If you actually compare how we collaborate and code, how we collaborate on text in general, it's really, really broken. Why can't we have version documentation? 

Actually in Doist, we use GitHub to manage our handbook. GitLab, they also do that. It still sucks because it requires you to be a developer to do that. The reason we do that is basically it's such a powerful aspect. You get peer reviews. You can see a history of everything, a log of everything. You see something like Notion of whatever or the latest, like Coda. It’s basically the Wild Wild West.

In a collaborative environment, especially if you have maybe 100 people working on something, you actually want to have a pretty structured handbook, connotation, or knowledge base of your team or your company. There's a lot of stuff that we need to solve and work on. I don't think Doist will be alone, but at least I hope we can be on the front lines of this.

Ben: Playbooks are a thing that we do on the main show episodes, but it's worth talking here. There is this interesting playbook that you've keyed into here that is taking very advanced developer tools and figuring out how to bring that model of working away from just developers. David and I struggle with this all the time. Notion doesn't even have suggestions right now. David will write up an outline and I’ll go in to make some comments, but what I really want to do is edit it and then have him approve my changes. I can't do that, so I make them orange. Google Docs is more advanced than that.

David: That's a workaround that works for us because we're two people, but if we were 100 people, no way that would work.

Ben: Even at PSL, I’m frequently collaborating with my coworkers and our model is we've bastardized suggestions in order to do the non-developer version of a pull request. I want to go in. I want to make these changes. I know I'm not the final decision maker on this, someone else is or vice versa. There's not a great non-developer workflow for a pull request in Prose effectively. That's totally essential in a remote-first world where you can't grab someone and go, come look over this over my shoulder for the next three minutes and make sure you're cool with all these changes.

We need to bring that developer model which has worked for a distributed workforce—frankly because of the open source movement—and figure out how to make that work for companies where engineers aren’t the only people who get tools like that.

David: I’m just thinking in my mind this whole time we're talking about this. I have Rahul at the pizza shop with Conrad, convincing him to join and making the pitch to join Superhuman as his cofounder. Developers, we have these amazing powerful tools, he is talking about text editors. If we bring that to everyone else, how powerful is that? This is the same thing.

Amir: There's a lot of stuff on that front. We’re just seeing the tip of the iceberg. We are paying such a big price as a society to have these bad tools and bad processes. Maybe we're not really reaching our potential as a species because we are still stuck in Word documents.

Ben: I think that’s a great, great place to leave it. Amir, if people want to learn more about what you're doing or ever want to reach out to you, where's the best place?

Amir: It is Twitter. I’m actively tweeting on @amix3k. You can just follow me, tag me, and I will try to respond.

David: You got to give us the story behind your Twitter handle. Is it 3k like mystery science-theater 3000, where does the 3k come from?

Ben: Is it like Andre 3000?

Amir: It’s basically like Andre 3000 and it’s also futuristic. I probably had some drinks when I created that.

Ben: Fantastic. We’ll put a link in the show notes so some folks can follow you.

David: That's great. Thank you so much for joining us.

Amir: Thank you folks and keep up the great work on the podcast. I'm looking forward to this every time you release something new.

Ben: Appreciate it. LPs, we’ll see you next time. Actually, we’ll see you in the New Year.

David: That’s right.